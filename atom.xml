<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>呆呆硕💤</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-07T08:26:08.797Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>呆呆硕💤</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>react setState详解</title>
    <link href="http://yoursite.com/2018/09/07/react%20setState%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/09/07/react setState详解/</id>
    <published>2018-09-07T08:29:07.000Z</published>
    <updated>2018-09-07T08:26:08.797Z</updated>
    
    <content type="html"><![CDATA[<h4 id="整理资料原文链接"><a href="#整理资料原文链接" class="headerlink" title="整理资料原文链接"></a>整理资料原文链接</h4><p><a href="https://segmentfault.com/a/1190000014131698" target="_blank" rel="noopener">React中setState真的是异步的吗</a><br><a href="https://zhuanlan.zhihu.com/p/25882602" target="_blank" rel="noopener">RReact源码分析4 — setState机制</a><br><a href="http://imweb.io/topic/5b189d04d4c96b9b1b4c4ed6" target="_blank" rel="noopener">揭密React setState</a></p><h3 id="React中setState同步异步问题"><a href="#React中setState同步异步问题" class="headerlink" title="React中setState同步异步问题"></a>React中setState同步异步问题</h3><p>有一个需求，需要在在onClick里累加两次，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onClick = () =&gt; &#123;</span><br><span class="line">  this.setState(&#123; index: this.state.index + 1 &#125;);</span><br><span class="line">  this.setState(&#123; index: this.state.index + 1 &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Hello extends Component &#123;</span><br><span class="line">  constructor(props) &#123;</span><br><span class="line">    super(props);</span><br><span class="line">    this.state = &#123; counter: 0 &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;div onClick=&#123;this.onClick.bind(this)&#125;&gt;点我&lt;/div&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    //手动绑定mousedown事件</span><br><span class="line">    ReactDom.findDOMNode(this).addEventListener(</span><br><span class="line">      &quot;mousedown&quot;,</span><br><span class="line">      this.onClick.bind(this)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    //延时调用onclick事件</span><br><span class="line">    setTimeout(this.onClick.bind(this), 1000);</span><br><span class="line">  &#125;</span><br><span class="line">  onClick(event) &#123;</span><br><span class="line">    if (event) &#123;</span><br><span class="line">      console.log(event.type);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      console.log(&quot;timeout&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&quot;prev state:&quot;, this.state.counter);</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      counter: this.state.counter + 1</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(&quot;next state:&quot;, this.state.counter);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">export default Hello;</span><br></pre></td></tr></table></figure><p>在这个组件中采用3中方法更新state</p><ul><li>在div节点中绑定onClick事件</li><li>在componentDidMount中手动绑定mousedown事件</li><li>在componentDidMount中使用setTimeout调用onClick</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;prev state:&quot;</span><br><span class="line">0</span><br><span class="line">&quot;next state:&quot;</span><br><span class="line">1</span><br><span class="line">mousedown</span><br><span class="line">&quot;prev state:&quot;</span><br><span class="line">1</span><br><span class="line">&quot;next state:&quot;</span><br><span class="line">2</span><br><span class="line">click</span><br><span class="line">&quot;prev state:&quot;</span><br><span class="line">2</span><br><span class="line">&quot;next state:&quot;</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>三种方式只有在div上绑定的onClick事件输出了可以证明setState是异步的结果，另外两种方式显示setState似乎是同步的。</p><h4 id="一个简单的流程图"><a href="#一个简单的流程图" class="headerlink" title="一个简单的流程图"></a>一个简单的流程图</h4><p><img src="https://user-gold-cdn.xitu.io/2018/8/30/1658a8a62d6bb975?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="enter image description here"></p><h4 id="setState异步的实现"><a href="#setState异步的实现" class="headerlink" title="setState异步的实现"></a>setState异步的实现</h4><p>在componentWillMount中调用setState</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//代码位于ReactBaseClasses</span><br><span class="line"> * @param &#123;partialState&#125; 设置的state参数</span><br><span class="line"> * @param &#123;callback&#125; 设置state后的回调</span><br><span class="line">ReactComponent.prototype.setState = function(partialState, callback) &#123;</span><br><span class="line">  //将setState事务放进队列中</span><br><span class="line">  this.updater.enqueueSetState(this, partialState);</span><br><span class="line">  if (callback) &#123;</span><br><span class="line">    this.updater.enqueueCallback(this, callback, &apos;setState&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在setState中调用了enqueueSetState方法将传入的state放到一个队列中，partialState可以传object,也可以传function,它会产生新的state以一种Object.assgine（）的方式跟旧的state进行合并。接下来，看下enqueueSetState的具体实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//代码位于ReactUpdateQueue.js</span><br><span class="line">  enqueueSetState: function(publicInstance, partialState) &#123;</span><br><span class="line">      //省略部分代码</span><br><span class="line">      //从组件列表中找到并返回需渲染的组件</span><br><span class="line">    var internalInstance = getInternalInstanceReadyForUpdate(</span><br><span class="line">      publicInstance,</span><br><span class="line">      &apos;setState&apos;,</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    if (!internalInstance) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //state队列</span><br><span class="line">    var queue = internalInstance._pendingStateQueue ||</span><br><span class="line">      (internalInstance._pendingStateQueue = []);</span><br><span class="line">    //将新的state放入队列</span><br><span class="line">    queue.push(partialState);</span><br><span class="line"></span><br><span class="line">    enqueueUpdate(internalInstance);</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>enqueueSetState 做了两件事: </p><ul><li>1.在enqueueSetState中先是找到需渲染组件并将新的state并入该组件的需更新的state队列中</li><li>2.接下来调用了enqueueUpdate方法，接着来看:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//代码位于ReactUpdateQueue.js</span><br><span class="line">function enqueueUpdate(internalInstance) &#123;</span><br><span class="line">  ReactUpdates.enqueueUpdate(internalInstance);</span><br><span class="line">&#125;</span><br><span class="line">//代码位于ReactUpdates.js</span><br><span class="line">function enqueueUpdate(component) &#123;</span><br><span class="line">  ensureInjected();</span><br><span class="line">  // 如果没有处于批量创建/更新组件的阶段，则处理update state事务</span><br><span class="line">  if (!batchingStrategy.isBatchingUpdates) &#123;</span><br><span class="line">    batchingStrategy.batchedUpdates(enqueueUpdate, component);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  // 如果正处于批量创建/更新组件的过程，将当前的组件放在dirtyComponents数组中</span><br><span class="line">  dirtyComponents.push(component);</span><br><span class="line">  if (component._updateBatchNumber == null) &#123;</span><br><span class="line">    component._updateBatchNumber = updateBatchNumber + 1;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是实现setState异步更新的关键了，首先要了解的就是batchingStrategy，顾名思义就是批量更新策略，其中通过事务的方式实现state的批量更新，这里的事务和数据库中的事务的概念类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var ReactDefaultBatchingStrategy = &#123;</span><br><span class="line">  // 用于标记当前是否出于批量更新</span><br><span class="line">  isBatchingUpdates: false,</span><br><span class="line">  // 当调用这个方法时，正式开始批量更新</span><br><span class="line">  batchedUpdates: function (callback, a, b, c, d, e) &#123;</span><br><span class="line">    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;</span><br><span class="line"></span><br><span class="line">    ReactDefaultBatchingStrategy.isBatchingUpdates = true;</span><br><span class="line"></span><br><span class="line">    // 如果当前事务正在更新过程在中，则调用callback，既enqueueUpdate</span><br><span class="line">    if (alreadyBatchingUpdates) &#123;</span><br><span class="line">      return callback(a, b, c, d, e);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    // 否则执行更新事务</span><br><span class="line">      return transaction.perform(callback, null, a, b, c, d, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>isBatchingUpdates是该事务的一个标志，如果为true，表示react正在一个更新组件的事务流中，根据以上代码逻辑：</p><p>如果没有在事务流中，调用batchedUpdates方法进入更新流程，进入流程后，会将isBatchingUpdates设置为true。<br>否则，将需更新的组件放入dirtyComponents中，也很好理解，先将需更新的组件存起来，稍后更新。<br>这就解释了在componentDidMount中调用setState并不会立即更新state，因为正处于一个更新流程中，isBatchingUpdates为true，所以只会放入dirtyComponents中等待稍后更新。</p><h5 id="事件中的调用setState"><a href="#事件中的调用setState" class="headerlink" title="事件中的调用setState"></a>事件中的调用setState</h5><p>那么在事件中调用setState又为什么也是异步的呢,react是通过合成事件实现了对于事件的绑定，在组件创建和更新的入口方法mountComponent和updateComponent中会将绑定的事件注册到document节点上，相应的回调函数通过EventPluginHub存储。<br>当事件触发时，document上addEventListener注册的callback会被回调。从前面事件注册部分发现，此时回调函数为ReactEventListener.dispatchEvent，它是事件分发的入口方法。下面我们来看下dispatchEvent：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dispatchEvent: function (topLevelType, nativeEvent) &#123;</span><br><span class="line">    // disable了则直接不回调相关方法</span><br><span class="line">    if (!ReactEventListener._enabled) &#123;</span><br><span class="line">      return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);</span><br><span class="line">    try &#123;</span><br><span class="line">      // 放入</span><br><span class="line">      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      TopLevelCallbackBookKeeping.release(bookKeeping);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到了熟悉的batchedUpdates方法，只是调用方换成了ReactUpdates，再进入ReactUpdates.batchedUpdates。    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function batchedUpdates(callback, a, b, c, d, e) &#123;</span><br><span class="line">  ensureInjected();</span><br><span class="line">  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>豁然开朗，原来在事件的处理中也是通过同样的事务完成的，当进入事件处理流程后，该事务的isBatchingUpdates为true，如果在事件中调用setState方法，也会进入dirtyComponent流程。</p><h5 id="原生事件绑定和setTimeout中setState"><a href="#原生事件绑定和setTimeout中setState" class="headerlink" title="原生事件绑定和setTimeout中setState"></a>原生事件绑定和setTimeout中setState</h5><p>在回过头来看同步的情况，原生事件绑定不会通过合成事件的方式处理，自然也不会进入更新事务的处理流程。setTimeout也一样，在setTimeout回调执行时已经完成了原更新组件流程，不会放入dirtyComponent进行异步更新，其结果自然是同步的。</p><p>顺便提一下，在更新组建时，将更新的state合并到原state是在componentWillUpdate之后，render之前，所以在componentWillUpdate之前设置的setState可以在render中拿到最新值</p><p>##总结<br>1.在组件生命周期中或者react事件绑定中，setState是通过异步更新的。<br>2.在延时的回调或者原生事件绑定的回调中调用setState不一定是异步的。</p><p>这个结果并不说明setState异步执行的说法是错误的，更加准确的说法应该是setState不能保证同步执行</p><!-- ![image](https://raw.githubusercontent.com/abcrun/abcrun.github.com/master/blog/chrome/images/chrome_full.png) --><!-- [全面了解Nginx到底能做什么](https://juejin.im/post/5b8f963ce51d450e425e81b1?utm_source=gold_browser_extension) --><!-- [全面了解Nginx到底能做什么](https://juejin.im/post/5b8f963ce51d450e425e81b1?utm_source=gold_browser_extension) -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;整理资料原文链接&quot;&gt;&lt;a href=&quot;#整理资料原文链接&quot; class=&quot;headerlink&quot; title=&quot;整理资料原文链接&quot;&gt;&lt;/a&gt;整理资料原文链接&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000014
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>第一篇文章</title>
    <link href="http://yoursite.com/2018/09/05/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>http://yoursite.com/2018/09/05/第一篇文章/</id>
    <published>2018-09-05T11:06:04.000Z</published>
    <updated>2018-09-05T13:13:57.624Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>一年半多的工作时间里，零零碎碎的看了不少的技术相关的知识，不过由于某些不可抗拒的因素（懒！），还有一些客观原因（游戏太他妈好玩了），没有做到一个很好的积累。今天翻同性恋交友社区（github）时候看到一篇文章<a href="https://github.com/benjycui/benjycui.github.io/blob/master/posts/2015-9-10-great-habits-of-programmer.md#reorganize-what-you-had-learned" target="_blank" rel="noopener">Great Habits of Programmer</a>，虽然老夫英语大概只有三级的水平，不过凭借着超强的翻译插件差不多也了解了一下文章的大体意思。立个 FLAG 从今天起不定期更新，记录所学所见 顺便联系一下MarkDown的写法（妈的这个不定期我用的太机智了）。没准这也可能是最后一篇 毕竟我很懒。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h2&gt;&lt;p&gt;一年半多的工作时间里，零零碎碎的看了不少的技术相关的知识，不过由于某些不可抗拒的因素（懒！），还有一些客观原因（游戏太他妈好
      
    
    </summary>
    
    
      <category term="flag" scheme="http://yoursite.com/tags/flag/"/>
    
  </entry>
  
</feed>
